#!/usr/bin/env php
<?php declare(strict_types=1);
/*
 * This cli entrypoint sets up the Symfony Console Application and all its dependencies.
 * Some of this code is to replace functionality built into the Symfony kernel that we aren't using.
 */

require __DIR__.'/vendor/autoload.php';

use Monolog\ErrorHandler;
use Monolog\Logger;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\EventDispatcher\EventDispatcher;

// Create the event dispatcher - needs to be before container so compiler passes can be created
$dispatcher = new EventDispatcher();

// Create the container
/** @var ContainerBuilder $containerBuilder */
$containerBuilder = require __DIR__.'/config/container.php';

/** @var Logger $logger */
$logger = $containerBuilder->get('Monolog\Logger');
// Enables PHP errors to get to third party logging services
ErrorHandler::register($logger);
// At this point, we can disable php errors since Monolog will handle them (prevents duplicates)
// start-up errors will still go to console and PHP's native log file
ini_set('display_errors', '0');
ini_set('log_errors', '0');

// Set up the Application
$application = new Application('Devops');
$application->setDispatcher($dispatcher);

// Find all Commands in the container, add to Application.
foreach ($containerBuilder->findTaggedServiceIds('console.command') as $serviceId => $tagAttributes) {
    /** @var Command $command */
    $command = $containerBuilder->get($serviceId);
    $application->add($command);
}

/** @var ConsoleOutput $output */
$output = $containerBuilder->get('Symfony\Component\Console\Output\ConsoleOutput');

$application->run(null, $output);
