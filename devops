#!/usr/bin/env php
<?php declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use Monolog\ErrorHandler;
use Monolog\Handler\PsrHandler;
use Monolog\Logger;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Logger\ConsoleLogger;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Loader\YamlFileLoader;

# Create the container
$containerBuilder = new ContainerBuilder();
// make container aware of console commands for autoconfigure
$containerBuilder->registerForAutoconfiguration(Command::class)->addTag('console.command');
$loader = new YamlFileLoader($containerBuilder, new FileLocator(__DIR__ . '/config'));
$loader->load('services.yaml');
$containerBuilder->compile();

# Pre-emptive creation of the console output handler so we can feed it to Monolog early
# solves an issue where events get logged before Symfony's listeners fire off, causing double errors
$output = new ConsoleOutput();

/** @var Logger $logger */
$logger = $containerBuilder->get('Monolog\Logger');
# By adding the output consolelogger early, can prevent Monolog from creating its own StreamHandler which can happen if
# logs get created before a handler exists.
$consoleLogger = new ConsoleLogger($output);
$logger->pushHandler(new PsrHandler($consoleLogger));
# Enables PHP errors to get to third party logging services
ErrorHandler::register($logger);
# At this point, we can disable php errors since Monolog will handle them (prevents duplicates)
ini_set('display_errors', 'Off');

# Set up the Application
$application = new Application('Devops');

# Find all Commands in the container, add to Application.
foreach ($containerBuilder->findTaggedServiceIds('console.command') as $serviceId => $tagAttributes) {
    /** @var Command $command */
    $command = $containerBuilder->get($serviceId);
    $application->add($command);
}

$application->run(null, $output);
